;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   qui ago 17 2017
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

; #####################################################################
; segmento do programa principal (o segmento de dados não foi criado)
CODIGO SEGMENT PARA 'CODE'
       ASSUME CS:CODIGO
       ASSUME ES:CODIGO   
       
       
   
   ; inicia programa no endereço especificado
   ORG 0100h 
   JMP START 
   
   ; seta endereços das portas e controle do CI 8255


   ; constantes dos delays utilizados

   
   ; strings para os códigos de erro

   
   ; tabela de códigos da varredura do teclado (código, tecla ASCII)

	       
   ; início
   START: 
   
      VALOR equ 04H

      ; desabilita as interrupções
      CLI
      
      ; tamanho do offset do segmento de pilha em relação ao SP (x 010h)
      MOV AX,00000h
      MOV SS,AX
      
      ; seta endereço de início do segmento da pilha - 0FFFFh
      MOV AX,10000h
      MOV SP,AX
      
      ; inicializa registrador de segmento de código - 00000h
      MOV AX,00000h
      MOV CS,AX

      ; * insira seu código aqui *    
      
      CALL INIT_IO  
      CALL INIT_LCD
      
      MOV CX, 50000
      CALL DELAY
      
      MOV AH, 'A'
      CALL ESCREVE_LCD
      ;CALL TXT_LCD
      JMP $
      
      ; chama rotina principal
      CALL MAIN
   	 
      ; #####################################################################
      ; programa principal
MAIN:	      	
	 ; habilita as interrupções
	 STI       
	 ; varredura do teclado
	 LMAIN:  
	    
	    
	    
	    
	    
	   
	    JMP LMAIN
	      
	 RET
      
      ; #####################################################################
      ; rotina de inicialização do CI 8255A
INIT_IO: 
	 MOV DX, 0000H
	 MOV AX, 088H			; VALOR DO FABRICANTE PARA CONFIGURAR A PC MEIA ENTRADA E MEIA SAIDA
	 OUT DX, AX
	 MOV DX, 04004H
	 MOV AX, 00FH
	 RET      
      
OUT_PORTA: 
	 MOV AL, AH			; O VALOR DO BYTE PARA SAIR DEVE ESTAR EM AH
	 MOV DX, 4000H
	 OUT DX, AL
	 RET
   
OUT_PORTB:
	 MOV AL, AH
	 MOV DX, 4002H
	 OUT DX, AL
	 RET

OUT_PORTC: 	 		; PERGUNTAR SOBRE A DIVISÃO DA PORTA
	 MOV AL, AH
	 MOV DX, 4004H
	 OUT DX, AL	
	 RET

IN_PORTC: 
	 MOV DX, 4004H
	; IN DX, AL
	 RET
      
      ; #####################################################################   
      ; procedimento de delay - CX = 0001h = 22 us (1MHz)
      ; o número de interações deve estar carregado no registrador CX
      ;DELAY PROC NEAR
DELAY:	    push CX
LOOP_DELAY: JCXZ END_D
	    DEC CX
	    JMP LOOP_DELAY
END_D:      pop CX
      RET
      
  ;rotina para delay de aproximadamente 1 segundo    
  
DELAY_SEG:	push CX
		MOV CX, 50000
LOOP_DS:	JCXZ END_DS
		DEC CX
		JMP LOOP_DS
END_DS:		pop CX
      ; #####################################################################
      ; procedimento que inicializa o display LCD
      ; display LCD 16x2
INIT_LCD: 
      MOV AH, 00H
      CALL OUT_PORTB
      MOV CX, 1000		; TEMPO PARA 20 ms
      CALL DELAY
      MOV AH, 038H
      CALL COMANDO_LCD
      MOV AH, 0CH
      CALL COMANDO_LCD
      MOV AH, 06H
      CALL COMANDO_LCD
      MOV AH, 01H
      CALL COMANDO_LCD
      MOV CX, 230		; TEMPO PARA 5 ms
      CALL DELAY
      RET
      
      ; #####################################################################
      ; procedimento que envia um comando para o display LCD
      ; o caracter de comando deve estar no registrador AH
COMANDO_LCD:
	 CALL OUT_PORTA
	 MOV CX, 100
	 CALL DELAY
	 MOV AH, 04H
	 CALL OUT_PORTB	 
	 MOV CX, 250
	 CALL DELAY
	 MOV AH, 00H
	 CALL OUT_PORTB
         RET
      
      ; #####################################################################
      ; procedimento que escreve um caracter no display LCD
      ; o caracter deve estar no registrador AH em código ASCII
ESCREVE_LCD: 
	 CALL OUT_PORTA
	 MOV AH, 05H
	 CALL OUT_PORTB	 
         MOV CX, 250
         CALL DELAY
         MOV AH, 01H
         CALL OUT_PORTB
         RET
      
      ; #####################################################################
      ; procedimento que escreve um conjunto de caracteres no display LCD
      ; o endereço de memória de início da string deve estar no registrador SI
      ; toda string deve conter o terminador '$'
TXT_LCD:
      
      RET
      
      ; #####################################################################
      ; procedimento que limpa o display LCD
 CLEAR_LCD: 
	 MOV AH, 01H
	 CALL COMANDO_lCD
	 MOV CX, 230
	 CALL DELAY 
      RET
      


      ; #####################################################################
      ; procedimento que posiciona o cursor do display LCD
      ; o registrador BX armazena as coordenadas
      ; BH = linha  - 01 e 02
      ; BL = coluna - 01 a 16
      CURSOR_POS_LCD PROC NEAR
      
	 ; * insira seu código aqui *
	 
      CURSOR_POS_LCD ENDP

      ; #####################################################################
      ; procedimento que aciona o cursor do display LCD
      CURSOR_ON_LCD PROC NEAR
      
	 ; * insira seu código aqui *
      
      CURSOR_ON_LCD ENDP
      
      ; #####################################################################
      ; procedimento que oculta o cursor do display LCD
      CURSOR_OFF_LCD PROC NEAR
      
	 ; * insira seu código aqui *
	    
      CURSOR_OFF_LCD ENDP
      
      ; #####################################################################
      ; procedimento de análise de teclas
      ; o código de entrada do teclado estará disponível na posição de memória PORTC_VAL
      ; a tecla pressionada estará disponível na posição de memória TECLA
      TECLADO PROC NEAR
      
	 ; * insira seu código aqui *
	 
      TECLADO ENDP 
      
      ; #####################################################################
      ; trata a interrupção do teclado e armazena programa da calculadora
      ORG 00008h	; endereço da interrupção NMI 
      DW  04000h	; endereço da subrotina a ser executada (valor do registrador IP)
      DW  00000h	; endereço do registrador de segmento de código - CS
      ORG 04000h	; endereço da subrotina
      KEY_INT:		; rótulo da interrupção
	 
	 ; desabilita interrupções
	 CLI
	 
	 ; * insira seu código aqui *
	    
	 ; habilita interrupções
	 STI
      
      ; indica retorna da interrupção
      IRET

CODIGO ENDS
       END START