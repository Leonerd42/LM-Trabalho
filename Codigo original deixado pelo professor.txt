;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   qui ago 17 2017
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

; #####################################################################
; segmento do programa principal (o segmento de dados não foi criado)
CODIGO SEGMENT PARA 'CODE'
       ASSUME CS:CODIGO
       ASSUME ES:CODIGO   
   
   ; inicia programa no endereço especificado
   ORG 01000h
   
   ; seta endereços das portas e controle do CI 8255


   ; constantes dos delays utilizados

   
   ; strings para os códigos de erro

   
   ; tabela de códigos da varredura do teclado (código, tecla ASCII)

	       
   ; início
   START: 

      ; desabilita as interrupções
      CLI
      
      ; tamanho do offset do segmento de pilha em relação ao SP (x 010h)
      MOV AX,00000h
      MOV SS,AX
      
      ; seta endereço de início do segmento da pilha - 0FFFFh
      MOV AX,10000h
      MOV SP,AX
      
      ; inicializa registrador de segmento de código - 00000h
      MOV AX,00000h
      MOV CS,AX

      ; * insira seu código aqui *
      
      ; chama rotina principal
      CALL MAIN
   	 
      ; #####################################################################
      ; programa principal
      MAIN PROC NEAR
	      	
	 ; habilita as interrupções
	 STI 
      
	 ; varredura do teclado
	 LMAIN:  
	    
	    ; * insira seu código aqui *
	   
	    ; loop infinito
	    JMP LMAIN
	      
      MAIN ENDP
      
      ; #####################################################################
      ; rotina de inicialização do CI 8255A
      INIT_IO PROC NEAR
      
	 ; * insira seu código aqui *
	 
      INIT_IO ENDP
      
      ; #####################################################################
      ; rotina de escrita da porta A
      ; o byte deve estar no registrador AH
      OUT_PORTA PROC NEAR
      
	 ; * insira seu código aqui *
	 
      OUT_PORTA ENDP
      
      ; #####################################################################
      ; rotina de escrita da porta B
      ; o byte deve estar no registrador AH
      OUT_PORTB PROC NEAR

	 ; * insira seu código aqui *
	 
      OUT_PORTB ENDP
      
      ; #####################################################################
      ; rotina de escrita da porta C
      ; o byte deve estar no registrador AH
      OUT_PORTC PROC NEAR

	 ; * insira seu código aqui *
	 
      OUT_PORTC ENDP
      
      ; #####################################################################
      ; rotina de leitura da porta C
      ; o byte será carregado no registrador AL
      IN_PORTC PROC NEAR

	 ; * insira seu código aqui *
	 
      IN_PORTC ENDP
      
      ; #####################################################################   
      ; procedimento de delay - CX = 0001h = 22 us (1MHz)
      ; o número de interações deve estar carregado no registrador CX
      DELAY PROC NEAR

	 ; * insira seu código aqui *	
	      
      DELAY ENDP
      
      ; #####################################################################
      ; procedimento que inicializa o display LCD
      ; display LCD 16x2
      INIT_LCD PROC NEAR
      
	 ; * insira seu código aqui *
	 
      INIT_LCD ENDP
      
      ; #####################################################################
      ; procedimento que envia um comando para o display LCD
      ; o caracter de comando deve estar no registrador AH
      COMANDO_LCD PROC NEAR
	 
	 ; * insira seu código aqui *
	 
      COMANDO_LCD ENDP
      
      ; #####################################################################
      ; procedimento que escreve um caracter no display LCD
      ; o caracter deve estar no registrador AH em código ASCII
      ESCREVE_LCD PROC NEAR
    
	 ; * insira seu código aqui *
	 
      ESCREVE_LCD ENDP
      
      ; #####################################################################
      ; procedimento que escreve um conjunto de caracteres no display LCD
      ; o endereço de memória de início da string deve estar no registrador SI
      ; toda string deve conter o terminador '$'
      TXT_LCD PROC NEAR

	 ; * insira seu código aqui *

      TXT_LCD ENDP
      
      ; #####################################################################
      ; procedimento que limpa o display LCD
      CLEAR_LCD PROC NEAR
      
	 ; * insira seu código aqui *
	 
      CLEAR_LCD ENDP

      ; #####################################################################
      ; procedimento que posiciona o cursor do display LCD
      ; o registrador BX armazena as coordenadas
      ; BH = linha  - 01 e 02
      ; BL = coluna - 01 a 16
      CURSOR_POS_LCD PROC NEAR
      
	 ; * insira seu código aqui *
	 
      CURSOR_POS_LCD ENDP

      ; #####################################################################
      ; procedimento que aciona o cursor do display LCD
      CURSOR_ON_LCD PROC NEAR
      
	 ; * insira seu código aqui *
      
      CURSOR_ON_LCD ENDP
      
      ; #####################################################################
      ; procedimento que oculta o cursor do display LCD
      CURSOR_OFF_LCD PROC NEAR
      
	 ; * insira seu código aqui *
	    
      CURSOR_OFF_LCD ENDP
      
      ; #####################################################################
      ; procedimento de análise de teclas
      ; o código de entrada do teclado estará disponível na posição de memória PORTC_VAL
      ; a tecla pressionada estará disponível na posição de memória TECLA
      TECLADO PROC NEAR
      
	 ; * insira seu código aqui *
	 
      TECLADO ENDP 
      
      ; #####################################################################
      ; trata a interrupção do teclado e armazena programa da calculadora
      ORG 00008h	; endereço da interrupção NMI 
      DW  04000h	; endereço da subrotina a ser executada (valor do registrador IP)
      DW  00000h	; endereço do registrador de segmento de código - CS
      ORG 04000h	; endereço da subrotina
      KEY_INT:		; rótulo da interrupção
	 
	 ; desabilita interrupções
	 CLI
	 
	 ; * insira seu código aqui *
	    
	 ; habilita interrupções
	 STI
      
      ; indica retorna da interrupção
      IRET

CODIGO ENDS
       END START